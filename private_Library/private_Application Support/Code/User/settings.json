{
  // vim configuration
  "vim.leader": " ",
  "vim.handleKeys": {
    "<C-n>": false
  },
  "vim.insertModeKeyBindings": [
    // Enter normal mode with jj
    {
      "before": ["j", "j"],
      "after": ["<Esc>"]
    }
  ],
  "vim.operatorPendingModeKeyBindings": [
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    }
  ],
  "vim.normalModeKeyBindings": [
    // Go to implementation
    {
      "before": ["g", "i"],
      "commands": [
        {
          "command": "editor.action.goToImplementation"
        }
      ]
    },
    // Go to references
    {
      "before": ["g", "r"],
      "commands": [
        {
          "command": "editor.action.goToReferences"
        }
      ]
    },
    // Go to type definition
    {
      "before": ["g", "t"],
      "commands": [
        {
          "command": "editor.action.goToTypeDefinition"
        }
      ]
    },
    // Go to source definition
    {
      "before": ["g", "s"],
      "commands": [
        {
          "command": "editor.action.goToSourceDefinition"
        }
      ]
    },
    // Go to next problem
    {
      "before": ["g", "n"],
      "commands": [
        {
          "command": "editor.action.marker.next"
        }
      ]
    },
    // Go to previous problem
    {
      "before": ["g", "p"],
      "commands": [
        {
          "command": "editor.action.marker.prev"
        }
      ]
    },
    // Select all
    {
      "before": ["<leader>", "a"],
      "after": ["g", "g", "V", "G"]
    },
    // Go to matching bracket
    {
      "before": ["<leader>", "m"],
      "after": ["%"]
    },
    // Clear Search Highlight with Enter
    {
      "before": ["<CR>"],
      "commands": [
        {
          "command": ":nohl"
        }
      ]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // Go to beginning of line
    {
      "before": ["H"],
      "after": ["^"]
    },
    // Go to end of line
    {
      "before": ["L"],
      "after": ["$"]
    },
    // Copy until end of line
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    // "Find next" centres the viewport
    {
      "before": ["n"],
      "after": ["n", "z", "z"]
    },
    // "Find previous" centres the viewport
    {
      "before": ["N"],
      "after": ["N", "z", "z"]
    },
    // Highlight / search word under cursor
    {
      "before": ["<leader>", "h"],
      "after": ["*", "N"]
    },
    // Search on Dash
    {
      "before": ["<C-h>"],
      "commands": [
        {
          "command": "extension.dash.specific"
        }
      ]
    },
    // Debug: Toggle Breakpoint
    {
      "before": ["<leader>", "d", "b"],
      "after": [""],
      "commands": [
        {
          "command": "editor.debug.action.toggleBreakpoint"
        }
      ]
    },
    // Debug: Add to Watch
    {
      "before": ["<leader>", "d", "w"],
      "after": [""],
      "commands": [
        {
          "command": "editor.debug.action.selectionToWatch"
        }
      ]
    },
    // Debug: Next Breakpoint
    {
      "before": ["<leader>", "d", "n"],
      "after": [""],
      "commands": [
        {
          "command": "editoreditor.debug.action.goToNextBreakpoint"
        }
      ]
    },
    // Debug: Previous Breakpoint
    {
      "before": ["<leader>", "d", "p"],
      "after": [""],
      "commands": [
        {
          "command": "editoreditor.debug.action.goToPreviousBreakpoint"
        }
      ]
    },
    // Debug: Attach to Node Process
    {
      "before": ["<leader>", "d", "a"],
      "after": [""],
      "commands": [
        {
          "command": "extension.pwa-node-debug.attachNodeProcess"
        }
      ]
    },
    // Debug: Select and Start Debugging
    {
      "before": ["<leader>", "d", "s"],
      "after": [""],
      "commands": [
        {
          "command": "workbench.action.debug.selectandstart"
        }
      ]
    },
    // Debug: Start Last Debugging Session
    {
      "before": ["<leader>", "D"],
      "after": [""],
      "commands": [
        {
          "command": "workbench.action.debug.start"
        }
      ]
    },
    // Debug: Continue
    {
      "before": ["<leader>", "d", "c"],
      "after": [""],
      "commands": [
        {
          "command": "workbench.action.debug.continue"
        }
      ]
    },
    // Debug: Stop
    {
      "before": ["<leader>", "d", "S"],
      "after": [""],
      "commands": [
        {
          "command": "workbench.action.debug.stop"
        }
      ]
    }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // Go to beginning of line
    {
      "before": ["H"],
      "after": ["^", "l"]
    },
    // Go to end of line
    {
      "before": ["L"],
      "after": ["$", "h"]
    },
    // Copy until end of line
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    // Go to matching bracket
    {
      "before": ["<leader>", "m"],
      "after": ["%"]
    },
    // Do not override the current register when pasting in Visual Mode
    {
      "before": ["p"],
      "after": ["p", "g", "v", "y"]
    }
  ],
  "vim.easymotion": true,
  "vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf",
  "vim.easymotionMarkerFontWeight": "bold",
  "vim.foldfix": true,
  "vim.highlightedyank.enable": true,
  "vim.hlsearch": true,
  "vim.sneak": true,
  "vim.useSystemClipboard": true,

  /**
   * Visual Studio Code General Settings
   */
  "breadcrumbs.enabled": true,
  "editor.acceptSuggestionOnEnter": "off",
  "editor.autoClosingBrackets": "beforeWhitespace",
  "editor.fontFamily": "RobotoMono Nerd Font Mono Medium, monospace",
  "editor.fontSize": 14,
  "editor.fontWeight": "300",
  "editor.inlineSuggest.enabled": true,
  "editor.inlayHints.enabled": "on",
  "editor.lineHeight": 24,
  "editor.quickSuggestions": {
    "comments": "on",
    "strings": "on"
  },
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "",
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.referenceSearch.trigger",
  "editor.gotoLocation.alternativeDeclarationCommand": "",
  "editor.quickSuggestionsDelay": 0,
  "editor.renderControlCharacters": true,
  "editor.renderWhitespace": "all",
  "editor.rulers": [80, 120],
  "editor.smoothScrolling": true,
  "editor.tabSize": 2,
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  "editor.wordWrap": "off",
  "errorLens.enabled": true,
  "explorer.compactFolders": false,
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  "markdown.preview.doubleClickToSwitchToEditor": false,
  "search.exclude": {
    "**/.yarn": true
  },
  "terminal.external.osxExec": "iTerm.app",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.fontFamily": "RobotoMono Nerd Font Mono Medium, monospace",
  "terminal.integrated.fontSize": 12,
  "terminal.integrated.lineHeight": 1,
  "terminal.integrated.shellIntegration.enabled": true,
  "terminal.integrated.stickyScroll.enabled": true,
  "window.zoomLevel": 0,
  "workbench.commandPalette.history": 0,
  "workbench.settings.editor": "json",
  "workbench.statusBar.visible": true,
  "zenMode.fullScreen": false,

  /**
   * Language-specific settings
   */
  "[javascript]": {
    "editor.formatOnSave": true
  },
  "[typescript]": {
    "editor.formatOnSave": true,
  },
  "[typescriptreact]": {
    "editor.formatOnSave": true,
  },
  "[css]": {
    "editor.formatOnSave": true
  },
  "[ruby]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "Shopify.ruby-lsp",
    "editor.tabSize": 2, // Use 2 spaces for indentation
    "editor.insertSpaces": true, // Use spaces and not tabs for indentation
    "editor.semanticHighlighting.enabled": true, // Enable semantic highlighting
    "editor.formatOnType": false, // Enable formatting while typing
  },
  "editor.accessibilitySupport": "off",
  "git.autofetch": false,
  "javascript.inlayHints.parameterNames.enabled": "none",
  "javascript.updateImportsOnFileMove.enabled": "never",
  "javascript.validate.enable": true,
  "typescript.inlayHints.parameterNames.enabled": "none",
  "typescript.validate.enable": true,
  "workbench.activityBar.location": "top",
  "git.blame.editorDecoration.enabled": true,
  "rubyLsp.formatter": "standard",
  "rubyLsp.rubyVersionManager": {
    "identifier": "mise",
  },
  "rubyLsp.linters": [
    "standard"
  ],
  "rubyLsp.enabledFeatures": {
    "codeActions": true,
    "diagnostics": true,
    "documentHighlights": true,
    "documentLink": true,
    "documentSymbols": true,
    "foldingRanges": true,
    "formatting": true,
    "hover": true,
    "inlayHint": true,
    "onTypeFormatting": true,
    "selectionRanges": true,
    "semanticHighlighting": true,
    "completion": true
  },
  "security.workspace.trust.untrustedFiles": "open"
}
